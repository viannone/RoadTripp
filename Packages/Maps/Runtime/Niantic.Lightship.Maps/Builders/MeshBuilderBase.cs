// Copyright 2023 Niantic, Inc. All Rights Reserved.

using System;
using JetBrains.Annotations;
using Niantic.Lightship.Maps.ExtensionMethods;
using UnityEngine;

namespace Niantic.Lightship.Maps.Builders
{
    /// <inheritdoc cref="IMeshBuilder" />
    [PublicAPI]
    public abstract class MeshBuilderBase : FeatureBuilderBase, IMeshBuilder
    {
        [Tooltip("Materials that will be applied to " +
            "rendered meshes generated by this builder.")]
        [SerializeField]
        protected Material[] _materials;

        /// <inheritdoc />
        public MeshFilter CreateMeshComponents(IMapTileObject mapTileObject)
        {
            var meshGameObject = new GameObject($"{BuilderName} Mesh");
            meshGameObject.transform.SetParent(mapTileObject.Transform);
            meshGameObject.transform.localPosition = ZOffset;
            meshGameObject.transform.localScale = Vector3.one;

            var meshRenderer = meshGameObject.AddComponent<MeshRenderer>();
            meshRenderer.materials = _materials;

            return meshGameObject.AddComponent<MeshFilter>();
        }

        /// <inheritdoc />
        public virtual void Release(MeshFilter meshFilter)
        {
            Destroy(meshFilter.sharedMesh);
        }

        /// <summary>
        /// Assigns a generated <see cref="Mesh"/> to a <see cref="MeshFilter"/> for rendering.
        /// </summary>
        /// <param name="mesh">The mesh generated by the <c>Build</c> method.</param>
        /// <param name="meshFilter">The <see cref="MeshFilter"/> created by the
        /// call to the builder's <see cref="CreateMeshComponents"/> method.</param>
        protected static void SetMeshForFilter(Mesh mesh, MeshFilter meshFilter)
        {
            bool valid = mesh.IsReferenceNotNull();
            meshFilter.gameObject.SetActive(valid);
            meshFilter.sharedMesh = mesh;
        }
    }
}
