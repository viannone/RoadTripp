// Copyright 2023 Niantic, Inc. All Rights Reserved.

using System;
using System.Collections.Generic;
using JetBrains.Annotations;
using Niantic.Lightship.Maps.Core;
using Niantic.Lightship.Maps.Core.Coordinates;
using Niantic.Lightship.Maps.Themes;
using UnityEngine;

namespace Niantic.Lightship.Maps
{
    /// <summary>
    /// This interface contains all of the members of
    /// <see cref="LightshipMapView"/>'s public API.
    /// </summary>
    [PublicAPI]
    public interface ILightshipMapView
    {
        #region Public events and properties

        /// <summary>
        /// Event that's raised when a new <see cref="IMapTile"/> is added to the
        /// scene, after all of its meshes have been generated by feature builders.
        /// </summary>
        event Action<IMapTile, IMapTileObject> MapTileAdded;

        /// <summary>
        /// Event that's raised when an <see cref="IMapTile"/> is no longer in view,
        /// just before its <see cref="IMapTileObject"/> is returned to the pool.
        /// </summary>
        event Action<IMapTile, IMapTileObject> MapTileRemoved;

        /// <summary>
        /// Event that's raised when the map's radius changes.
        /// </summary>
        event Action<double> MapRadiusChanged;

        /// <summary>
        /// Event that's raised when the map's center changes.
        /// </summary>
        event Action<LatLng> MapCenterChanged;

        /// <summary>
        /// Event that's raised when the map is repositioned back to the scene's origin.
        /// </summary>
        event Action<LatLng> MapOriginChanged;

        /// <summary>
        /// The <see cref="LatLng"/> that the map uses as its origin.
        /// Note that the map's position can be changed through its transform
        /// without affecting the <see cref="MapOrigin"/>'s location.  However,
        /// large distances between the map's center (<see cref="MapCenter"/>)
        /// and its origin can lead to loss of precision, so setting the map's
        /// transform directly is not recommended.
        /// </summary>
        LatLng MapOrigin { get; }

        /// <summary>
        /// The center of the map's viewable area
        /// </summary>
        LatLng MapCenter { get; }

        /// <summary>
        /// The radius of the map's viewable area, in meters
        /// </summary>
        double MapRadius { get; }

        /// <summary>
        /// The map's scale
        /// </summary>
        double MapScale { get; }

        /// <summary>
        /// All active <see cref="IMapTile"/>s in the scene
        /// </summary>
        IReadOnlyDictionary<ulong, IMapTile> ActiveMapTiles { get; }

        /// <summary>
        /// If true, the map will always be centered at the scene's origin
        /// </summary>
        bool IsMapCenteredAtOrigin { get; }

        #endregion
        #region Methods used to set the map's viewable area

        /// <summary>
        /// This method is called to offset the map view's position.
        /// </summary>
        /// <param name="offset">The offset, in Unity's world space.</param>
        void OffsetMapCenter(Vector3 offset);

        /// <summary>
        /// This method is called to update the map view's position
        /// (in response to changes in the device's GPS, for example).
        /// </summary>
        /// <param name="latLng">The map's center, in lat/lng coordinates.</param>
        void SetMapCenter(in LatLng latLng);

        /// <summary>
        /// This method is called to update the map view's position
        /// (in response to changes in the device's GPS, for example).
        /// </summary>
        /// <param name="center">The map's center, in Unity's world space.</param>
        void SetMapCenter(Vector3 center);

        /// <summary>
        /// This method is called to update the map's viewable
        /// radius (when the map is zoomed in or out, for example).
        /// </summary>
        /// <param name="mapRadius">The map's viewable radius, in scene units.</param>
        void SetMapRadius(double mapRadius);

        /// <summary>
        /// This method is called to update the map view's position and
        /// viewable radius (in response to changes in the device's GPS
        /// or if the map is zoomed in or out, for example).
        /// </summary>
        /// <param name="latLng">The map's center, in lat/lng coordinates.</param>
        /// <param name="mapRadius">The map's viewable radius, in scene units.</param>
        void SetViewableArea(in LatLng latLng, double mapRadius);

        /// <summary>
        /// This method is called to update the map view's position and
        /// viewable radius (in response to changes in the device's GPS
        /// or if the map is zoomed in or out, for example).
        /// </summary>
        /// <param name="center">The map's center, in Unity's world space.</param>
        /// <param name="mapRadius">The map's viewable radius, in scene units.</param>
        void SetViewableArea(Vector3 center, double mapRadius);

        #endregion
        #region Methods to convert between scene and LatLng coordinates

        /// <summary>
        /// Converts a position in Unity's world space to a
        /// location in <see cref="LatLng"/> coordinates.
        /// </summary>
        /// <param name="scenePosition">The position to convert.</param>
        /// <returns>A set of lat/lng coordinates for this location.</returns>
        LatLng SceneToLatLng(Vector3 scenePosition);

        /// <summary>
        /// Converts a location in <see cref="LatLng"/>
        /// coordinates to a position in Unity's world space.
        /// </summary>
        /// <param name="location">The location to convert.</param>
        /// <returns>A world space position.</returns>
        Vector3 LatLngToScene(in LatLng location);

        /// <summary>
        /// Converts a location in <see cref="WebMercator12"/>
        /// coordinates to a position in Unity's world space.
        /// </summary>
        /// <param name="location">The location to convert.</param>
        /// <returns>A world space position.</returns>
        Vector3 WebMercator12ToScene(in WebMercator12 location);

        /// <summary>
        /// Convert a distance in meters in the real world to Unity scene units.
        /// Note that latitude is required here because our map uses Web Mercator
        /// projection, which causes distances to stretch as you approach the poles.
        /// </summary>
        /// <param name="meters">The distance, in meters, to convert.</param>
        /// <param name="latitude">The latitude at the location at which the conversion applies.
        /// A reasonable value for this would be the latitude at the map origin.</param>
        /// <returns>The distance in Unity scene units.</returns>
        double MetersToScene(double meters, double latitude);

        /// <summary>
        /// Convert a distance in Unity scene units to meters in the real world.
        /// Note that latitude is required here because our map uses Web Mercator
        /// projection, which causes distances to stretch as you approach the poles.
        /// </summary>
        /// <param name="sceneUnits">The distance, in Unity scene units, to convert.</param>
        /// <param name="latitude">The latitude at the location at which the conversion applies.
        /// A reasonable value for this would be the latitude at the map origin.</param>
        /// <returns>The distance in meters.</returns>
        public double SceneToMeters(double sceneUnits, double latitude);

        #endregion

        /// <summary>
        /// Sets the current <see cref="MapTheme"/>
        /// </summary>
        /// <param name="theme"></param>
        void SetMapTheme(MapTheme theme);

        /// <summary>
        /// Refreshes the map at the current location.
        /// </summary>
        void RefreshMap();
    }
}
